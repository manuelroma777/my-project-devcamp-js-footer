22:41 22/05/2024

Sample site:
https://github.com/nlarrea/DevCamp/blob/main/02-full-stack/module_05-js_part2/03_package_manager/09_build_npm_module.md


Crear un módulo npm
Primeros pasos
Crear el módulo
Código - index.js
Documentación - README.md
Publicar el módulo
Testear el módulo


Primeros pasos
Elementos necesarios para crear un módulo npm:

Herramientas:
Editor de código (Visual Studio Code por ejemplo)
Node.js
Cuentas en:
GitHub
npm

Empezamos:

npm set init-author-name "tu nombre"
npm set init-author-email "tu@email.com"
npm set init-author-url "http://www.tu-url.com"

Coloqué así:


PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> npm set init-author-name "Manuel"
PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> npm set init-author-email "manuelroma555@hotmail.es"
PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> npm set init-author-url "https://github.com/manuelroma777"

Hecho esto:
Desde la terminal o powershell de Visual S.C.

npm login

Se nos pedirá que introduzcamos el usuario, el password y el email. Una vez hecho esto, ya podemos comenzar a crear el módulo.

Crear el módulo

Creamos repositorio unico para el proyecto en GitHub

Luego volvemos a la linea de comandos
Ingresamos al directorio donde vamos a crear el nuevo proyecto

Desde la linea de comandos:

npm init

Este creara un "package.json" vacio

y nos pedira detalles como:
nombre:
version 1.0.0 :
description: 
entry point:
test command:
git repository: "your Git repository link"
keywords:
licence (ISC):  MIT


NOTE:
La diferencia entre la ISC y la MIT radica en lo que quieres distribuir. Si vas a distribuir el programa compilado, listo para usar, sin cobrar por la entrega o por el uso, pero manteniendo el copyright, usa la ISC. Tu software es libre o más bien gratis… free as a beer.
bY pLATZY

MIT License

Esta es la licencia más permisiva del listado, ya que prácticamente permite hacer lo que nosotros deseemos con el software. Ya sea ejecutarlo, estudiarlo, modificarlo, redistribuido, e inclusive, sub-licenciar. Las únicas restricciones son: Mantener los derechos de autor.
bY cODIGOFACILITO.cOM

Al seguir genera un código y hace la pregunta si todo esta bien precionar: yes/not

Una vez respondidas todas las preguntas, se nos creará el archivo package.json con la información que hemos introducido.

Creación Código - index.js
<< Crear módulo | Volver al índice | Documentación >>

Vamos a crear un archivo llamado index.js en el directorio raíz del módulo. Este archivo será el archivo principal del módulo, y será el que se ejecutará cuando se importe el módulo en otro proyecto.

Dentro de este archivo, escribiremos el siguiente código:

// que todo el código debe seguir la norma convencional de JS
'use strict';


// importamos de la forma antigua el módulo moment
var moment = require('moment');


// documentación -> indica qué hará la función
/**
 * Returns a string element with a footer and updating year.
 * @param {string} name
 * @return {string}
 */
exports.footer = function (name) {
    return "Copyright " + moment().format('YYYY') + " " + name + "All rights reserved.";
};



Desde la linea de comandos

npm install --save moment

para agregar "moment"



Documentación - README.md
<< Código | Volver al índice | Publicar módulo >>

Ahora, lo que debemos hacer es crear un archivo README:

Para Mac o Linux

touch README.md

Windows

New-Item -Path . -Name "README.md" -ItemType "file" -Force


En este archivo README escribiremos la documentación del módulo. En este caso, escribiremos lo siguiente:

# Devcamp JS Footer

> This should be used in the following manner:

Install with the command:

    ```bash
    npm install --save copr-msg-footer
    ```

Add to a JavaScript Project with the following code:

    ```javascript
    import { footer } from "copr-msg-footer";

    footer('Some name');
    ```

Guardamos para que todos los cambios esten y listo al siguiente paso

---------------------------------------------------------------------
Importante paso que no esta en el ejemplo
---------------------------------------------------------------------
From the teacher
Desde la consola:

git init

Crea un repositorio "Git" vacio

NOTA
Tuve que instalar Git en la PC nueva

Ahora con el comando:

git status

Veremos nuestro directorio de modulos de nodo

PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README.md
        Steps.txt
        index.js
        node_modules/
        package-lock.json
        package.json

nothing added to commit but untracked files present (use "git add" to track)

Necesitamos añadir el llamado: archivo ignorar git

con el comando:

touch .gitignore

Que va a crear un archivo OCULTO

New-Item -Path . -Name ".gitignore" -ItemType "File"

PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> New-Item -Path . -Name ".gitignore" -ItemType "File"
>>


    Directorio: D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        23/05/2024      0:25              0 .gitignore

NOTA:
los archivos que aparezcan con punto de primero, son considerados ocultos
Ej:

.myNameFile
.***
.***

Debemos de ingresar desde Visual S.C. al archivo oculto para escribir:

node_modules

Ahora desde la linea de comandos:

git status

Veremos que los "módulos de nodo" ya no son incluidos:

PS D:\AAA-FULL STACK\Module 5\AAA-Proyectos Directorio\Proyecto desde CERO-22-05-2024> git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        README.md
        Steps.txt
        index.js
        package-lock.json
        package.json

nothing added to commit but untracked files present (use "git add" to track)











Vamos a GitHub para elegir:

push an existing repository from the command line

git remote add origin https://github.com/manuelroma777/my-project-devcamp-js-footer.git
git branch -M main
git push -u origin main













